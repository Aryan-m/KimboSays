@page "/"

@inject IApiSvc ApiService
@inject IJSRuntime JS
@inject Blazored.Toast.Services.IToastService ToastService

<PageTitle>KimboSays</PageTitle>

<div class="container py-5">
    <div class="table-responsive shadow-sm rounded">
        <table class="table table-hover align-middle table-striped-custom mb-0">
            <thead class="table-header-gradient">
                <tr>
                    <th>Task</th>
                    <th>Description</th>
                    <th>Difficulty</th>
                    <th>Date Added</th>
                    <th><div><button class="rounded-circle btn-glossy bg-glossy-blue" @onclick="BeginNew">+</button></div></th>
                </tr>
            </thead>
            <tbody>
                <!-- New Task Row appears as first row when addingNew -->
                @if (addingNew)
                {
                    <tr>
                        <td>
                            <input class="form-control" @bind="newTask.Task" />
                        </td>
                        <td>
                            <input class="form-control" @bind="newTask.Description" />
                        </td>
                        <td>
                            <select class="form-select"
                                    @bind="newTask.EffortId">
                                <option value="" disabled selected>-- select --</option>
                                @if (effortOptions != null)
                                {
                                    @foreach (var e in effortOptions)
                                    {
                                        <option value="@e.Id">@e.Text</option>
                                    }
                                }
                            </select>
                        </td>
                        <td></td>
                        <td>
                            <button class="rounded-circle btn-glossy bg-glossy-green me-1" @onclick="AddNew">+</button>
                            <button class="rounded-circle btn-glossy bg-glossy-grey" @onclick="CancelNew">x</button>
                        </td>
                    </tr>
                }

                @if (kimboTasks is null)
                {
                    <tr>
                        <td colspan="5" class="text-center">Loading...</td>
                    </tr>
                }
                else
                {
                    @foreach (var item in kimboTasks)
                    {
                        <tr @onclick="() => BeginEdit(item)" style="cursor: pointer;">
                            @if (editTask == item)
                            {
                                <td>
                                    <input class="form-control" @bind="editModel.Task" />
                                </td>
                                <td>
                                    <input class="form-control" @bind="editModel.Description" />
                                </td>
                                <td>
                                    <select class="form-select" @bind="editModel.EffortId">
                                        @if (effortOptions != null)
                                        {
                                            @foreach (var e in effortOptions)
                                            {
                                                <option value="@e.Id">@e.Text</option>
                                            }
                                        }
                                    </select>
                                </td>
                                <td></td>
                                <td>
                                    <button class="rounded-circle btn-glossy bg-glossy-green me-1"
                                            @onclick:stopPropagation="true"
                                            @onclick="SaveEdit">
                                        O
                                    </button>
                                    <button class="rounded-circle btn-glossy bg-glossy-grey"
                                            @onclick:stopPropagation="true"
                                            @onclick="CancelEdit">
                                        X
                                    </button>
                                </td>
                            }
                            else
                            {
                                <td>@item.Task</td>
                                <td>@item.Description</td>
                                <td>@effortOptions?.Find(e => e.Id == item.EffortId)?.Text</td>
                                <td>@item.DateAdded.ToString("MMM dd, yyyy")</td>
                                <td>
                                    <button class="rounded-circle btn-glossy bg-glossy-red"
                                            @onclick:stopPropagation="true"
                                            @onclick="() => DeleteTask(item)">
                                        X
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private const string SuccessMsg = "Done";
    private const string ErrorMsg = "Something's f*cked up! Call Awy!";

    private List<KimboTask>? kimboTasks;
    private List<TaskEffort>? effortOptions;

    private KimboTask? editTask;
    private KimboTask? editModel;

    private bool addingNew = false;
    private KimboTask newTask = new();

    protected override async Task OnInitializedAsync()
    {
        await ExecuteSafeAsync(async () =>
        {
            effortOptions = await ApiService.GetEffortOptionsAsync();
            kimboTasks = await ApiService.GetAllTasksAsync();
        }, false);
    }

    private void BeginEdit(KimboTask task)
    {
        if (editTask != null || addingNew) return;

        editTask = task;
        editModel = new KimboTask
        {
            Id = task.Id,
            Task = task.Task,
            Description = task.Description,
            EffortId = task.EffortId,
            DateAdded = task.DateAdded
        };
    }

    private void CancelEdit()
    {
        editTask = null;
        editModel = null;
    }

    private async Task SaveEdit()
    {
        if (editTask == null || editModel == null) return;

        await ExecuteSafeAsync(async () =>
        {
            await ApiService.UpdateTaskAsync(editModel);

            editTask.Task = editModel.Task;
            editTask.Description = editModel.Description;
            editTask.EffortId = editModel.EffortId;

            editTask = null;
            editModel = null;
        });
    }

    private void BeginNew()
    {
        addingNew = true;
        newTask = new KimboTask();
    }

    private void CancelNew()
    {
        addingNew = false;
        newTask = new KimboTask();
    }

    private async Task AddNew()
    {
        await ExecuteSafeAsync(async () =>
        {
            var created = await ApiService.AddTaskAsync(newTask);
            if (created == null)
                throw new Exception("Add New Failed!");

            kimboTasks?.Insert(0, created);
            addingNew = false;
            newTask = new KimboTask();
        });
    }

    private async Task DeleteTask(KimboTask task)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Fosho Delete '{task.Task}'?");
        if (!confirmed) return;

        try
        {
            await ApiService.DeleteTaskAsync(task.Id);
            kimboTasks?.Remove(task);
            ShowSuccess();
        }
        catch
        {
            ShowError();
        }   
    }

    private void ShowSuccess() => ToastService.ShowSuccess(SuccessMsg);
    private void ShowError() => ToastService.ShowError(ErrorMsg);

    // Executes a task with error handling and success/failure notifications
    private async Task ExecuteSafeAsync(Func<Task> action, bool showMsgs = true)
    {
        try
        {
            await action();
            if (showMsgs)
                ShowSuccess();
        }
        catch
        {
            if (showMsgs)
                ShowError();
        }
    }
}

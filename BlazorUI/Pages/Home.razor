@page "/"

@inject IApiSvc ApiService
@inject IJSRuntime JS

<PageTitle>KimboSays</PageTitle>

<div class="container py-5">

    <div class="mb-2">
        <button class="rounded-circle btn-glossy bg-glossy-blue" @onclick="BeginNew">+</button>
    </div>

    <div class="table-responsive shadow-sm rounded">
        <table class="table table-hover align-middle table-striped-custom mb-0">
            <thead class="table-header-gradient">
                <tr>
                    <th>Task</th>
                    <th>Description</th>
                    <th>Difficulty</th>
                    <th>Date Added</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <!-- New Task Row appears as first row when addingNew -->
                @if (addingNew)
                {
                    <tr>
                        <td>
                            <input class="form-control" @bind="newTask.Task" />
                        </td>
                        <td>
                            <input class="form-control" @bind="newTask.Description" />
                        </td>
                        <td>
                            <input class="form-control" @bind="newTask.Effort" />
                        </td>
                        <td></td>
                        <td>
                            <button class="rounded-circle btn-glossy bg-glossy-green me-1" @onclick="SaveNew">+</button>
                            <button class="rounded-circle btn-glossy bg-glossy-grey" @onclick="CancelNew">~</button>
                        </td>
                    </tr>
                }

                @if (kimboTasks is null)
                {
                    <tr>
                        <td colspan="5" class="text-center">Loading...</td>
                    </tr>
                }
                else
                {
                    @foreach (var item in kimboTasks)
                    {
                        <tr @onclick="() => BeginEdit(item)" style="cursor: pointer;">
                            @if (editTask == item)
                            {
                                <td>
                                    <input class="form-control" @bind="editModel.Task" />
                                </td>
                                <td>
                                    <input class="form-control" @bind="editModel.Description" />
                                </td>
                                <td>
                                    <input class="form-control" @bind="editModel.Effort" />
                                </td>
                                <td></td>
                                <td>
                                    <button class="rounded-circle btn-glossy bg-glossy-green me-1"
                                            @onclick:stopPropagation="true"
                                            @onclick="SaveEdit">
                                        O
                                    </button>
                                    <button class="rounded-circle btn-glossy bg-glossy-grey"
                                            @onclick:stopPropagation="true"
                                            @onclick="CancelEdit">
                                        ~
                                    </button>
                                </td>
                            }
                            else
                            {
                                <td>@item.Task</td>
                                <td>@item.Description</td>
                                <td>@item.Effort</td>
                                <td>@item.DateAdded.ToString("MMM dd, yyyy")</td>
                                <td>
                                    <button class="rounded-circle btn-glossy bg-glossy-red"
                                            @onclick:stopPropagation="true"
                                            @onclick="() => DeleteTask(item)">
                                        X
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<KimboTask>? kimboTasks;

    private KimboTask? editTask;
    private KimboTask? editModel;

    private bool addingNew = false;
    private KimboTask newTask = new();

    protected override async Task OnInitializedAsync()
    {
        kimboTasks = await ApiService.GetAllTasksAsync();
    }

    // Edit
    private void BeginEdit(KimboTask task)
    {
        if (editTask != null || addingNew) return;

        editTask = task;
        editModel = new KimboTask
        {
            Id = task.Id,
            Task = task.Task,
            Description = task.Description,
            Effort = task.Effort,
            DateAdded = task.DateAdded
        };
    }

    private async Task SaveEdit()
    {
        if (editTask == null || editModel == null) return;

        await ApiService.UpdateTaskAsync(editModel);

        editTask.Task = editModel.Task;
        editTask.Description = editModel.Description;
        editTask.Effort = editModel.Effort;

        editTask = null;
        editModel = null;
    }

    private void CancelEdit()
    {
        editTask = null;
        editModel = null;
    }

    // Add
    private void BeginNew()
    {
        addingNew = true;
        newTask = new KimboTask();
    }

    private async Task SaveNew()
    {
        var created = await ApiService.AddTaskAsync(newTask);

        kimboTasks?.Insert(0, created); // insert at top
        addingNew = false;
        newTask = new KimboTask();
    }

    private void CancelNew()
    {
        addingNew = false;
        newTask = new KimboTask();
    }

    private async Task DeleteTask(KimboTask task)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Fosho Delete '{task.Task}'?");
        if (confirmed)
        {
            await ApiService.DeleteTaskAsync(task.Id);
            kimboTasks?.Remove(task);
        }
    }
}
